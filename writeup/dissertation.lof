\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {3.1}{\ignorespaces The compiler pipeline in Microsoft Roslyn, a similar project to Graal. Roslyn operates at a higher level than Graal, instead manipulating abstract syntax trees. [Figure \citealp {RoslynProject}]\relax }}{20}{figure.caption.3}
\contentsline {figure}{\numberline {3.2}{\ignorespaces Graal HIR created for a vector addition using two array literals\relax }}{22}{figure.caption.4}
\contentsline {figure}{\numberline {3.3}{\ignorespaces Relationships between IR levels and lowering types in Graal\relax }}{24}{figure.caption.5}
\contentsline {figure}{\numberline {3.4}{\ignorespaces Method substitution in Graal\relax }}{26}{figure.caption.6}
\contentsline {figure}{\numberline {3.5}{\ignorespaces Relationship between optimisations and deoptimisations [adapted from \citealp [p.\nobreakspace {}24]{Schwaighofer2009}]\relax }}{28}{figure.caption.7}
\addvspace {10\p@ }
\contentsline {figure}{\numberline {4.1}{\ignorespaces A high-level graph (with inlining disabled) for a simple method taking an array actual parameter, returning index 0\relax }}{33}{figure.caption.8}
\contentsline {figure}{\numberline {4.2}{\ignorespaces Information available at compile-time for the \texttt {LoadIndexedNode} shown in figure \ref {fig:access-index}\relax }}{34}{figure.caption.9}
\addvspace {10\p@ }
\contentsline {figure}{\numberline {5.1}{\ignorespaces A simple hash table for a phone book (figure \citet {HashTableWikiDiagram})\relax }}{39}{figure.caption.10}
\contentsline {figure}{\numberline {5.2}{\ignorespaces Bloom filter operation with $m=18$ and $k=3$ \citep {BloomFilterWikiDiagram}\relax }}{39}{figure.caption.11}
\contentsline {figure}{\numberline {5.3}{\ignorespaces Plot showing bit vector length versus expected insertations for various false probability rates\relax }}{40}{figure.caption.12}
\contentsline {figure}{\numberline {5.4}{\ignorespaces Finite state machine for the online algorithm\relax }}{45}{figure.caption.13}
\contentsline {figure}{\numberline {5.5}{\ignorespaces Class diagram for \texttt {InstrumentSupport}\relax }}{47}{figure.caption.14}
\contentsline {figure}{\numberline {5.6}{\ignorespaces Trace class hierarchy\relax }}{50}{figure.caption.15}
\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {7.1}{\ignorespaces Median insertation and membership query times for hash sets and each bloom filter implementation discussed. Note the use of logscale on the y axis.\relax }}{62}{figure.caption.16}
\contentsline {figure}{\numberline {7.2}{\ignorespaces Number of dependencies detected versus number of accesses when all operations are dependent\relax }}{64}{figure.caption.17}
\contentsline {figure}{\numberline {7.3}{\ignorespaces Memory usage versus number of accesses when all operations are dependent\relax }}{65}{figure.caption.18}
\contentsline {figure}{\numberline {7.4}{\ignorespaces Execution time versus number of accesses without instrumentation\relax }}{66}{figure.caption.19}
\contentsline {figure}{\numberline {7.5}{\ignorespaces Number of dependencies detected versus number of accesses when no operations are dependent\relax }}{68}{figure.caption.20}
\contentsline {figure}{\numberline {7.6}{\ignorespaces Execution time versus number of accesses when no operations are dependent\relax }}{69}{figure.caption.21}
\contentsline {figure}{\numberline {7.7}{\ignorespaces Number of dependencies detected versus number of accesses when 20\% of operations have dependencies\relax }}{70}{figure.caption.22}
\contentsline {figure}{\numberline {7.8}{\ignorespaces Execution time versus number of accesses when 20\% of operations are dependent\relax }}{71}{figure.caption.23}
\contentsline {figure}{\numberline {7.9}{\ignorespaces Number of dependencies detected versus number of accesses when 40\% of operations have dependencies\relax }}{71}{figure.caption.24}
\contentsline {figure}{\numberline {7.10}{\ignorespaces Execution time versus number of accesses when 40\% of operations are dependent\relax }}{72}{figure.caption.25}
\contentsline {figure}{\numberline {7.11}{\ignorespaces Number of dependencies detected versus number of accesses when 60\% of operations have dependencies\relax }}{73}{figure.caption.26}
\contentsline {figure}{\numberline {7.12}{\ignorespaces Execution time versus number of accesses when 60\% of operations are dependent\relax }}{74}{figure.caption.27}
\contentsline {figure}{\numberline {7.13}{\ignorespaces Number of dependencies detected versus number of accesses when 80\% of operations have dependencies\relax }}{74}{figure.caption.28}
\contentsline {figure}{\numberline {7.14}{\ignorespaces Execution time versus number of accesses when 80\% of operations are dependent\relax }}{75}{figure.caption.29}
\contentsline {figure}{\numberline {7.15}{\ignorespaces Execution time versus number of accesses when expected insertions is set to various multiples of the actual length when all operations are dependent\relax }}{77}{figure.caption.30}
\contentsline {figure}{\numberline {7.16}{\ignorespaces Execution time versus number of accesses when expected insertions is set to various multiples of the actual length when no operations are dependent\relax }}{78}{figure.caption.31}
\contentsline {figure}{\numberline {7.17}{\ignorespaces Memory usage versus number of accesses when a factor for the bloom filter size is used\relax }}{78}{figure.caption.32}
\addvspace {10\p@ }
